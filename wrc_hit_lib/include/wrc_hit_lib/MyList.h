// Generated by gencpp from file task1/MyList.msg
// DO NOT EDIT!


#ifndef TASK1_MESSAGE_MYLIST_H
#define TASK1_MESSAGE_MYLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace task1
{
template <class ContainerAllocator>
struct MyList_
{
  typedef MyList_<ContainerAllocator> Type;

  MyList_()
    : x(0)
    , y(0)
    , class_(0)
    , confidence(0.0)  {
    }
  MyList_(const ContainerAllocator& _alloc)
    : x(0)
    , y(0)
    , class_(0)
    , confidence(0.0)  {
  (void)_alloc;
    }



   typedef uint16_t _x_type;
  _x_type x;

   typedef uint16_t _y_type;
  _y_type y;

   typedef uint16_t _class__type;
  _class__type class_;

   typedef double _confidence_type;
  _confidence_type confidence;





  typedef boost::shared_ptr< ::task1::MyList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::task1::MyList_<ContainerAllocator> const> ConstPtr;

}; // struct MyList_

typedef ::task1::MyList_<std::allocator<void> > MyList;

typedef boost::shared_ptr< ::task1::MyList > MyListPtr;
typedef boost::shared_ptr< ::task1::MyList const> MyListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::task1::MyList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::task1::MyList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::task1::MyList_<ContainerAllocator1> & lhs, const ::task1::MyList_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.class_ == rhs.class_ &&
    lhs.confidence == rhs.confidence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::task1::MyList_<ContainerAllocator1> & lhs, const ::task1::MyList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace task1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::task1::MyList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::task1::MyList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::task1::MyList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::task1::MyList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task1::MyList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task1::MyList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::task1::MyList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7cdc894ba087a78c0e6ed640316773ba";
  }

  static const char* value(const ::task1::MyList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7cdc894ba087a78cULL;
  static const uint64_t static_value2 = 0x0e6ed640316773baULL;
};

template<class ContainerAllocator>
struct DataType< ::task1::MyList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "task1/MyList";
  }

  static const char* value(const ::task1::MyList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::task1::MyList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 x\n"
"uint16 y\n"
"uint16 class_\n"
"float64 confidence\n"
;
  }

  static const char* value(const ::task1::MyList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::task1::MyList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.class_);
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MyList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::task1::MyList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::task1::MyList_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.y);
    s << indent << "class_: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.class_);
    s << indent << "confidence: ";
    Printer<double>::stream(s, indent + "  ", v.confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TASK1_MESSAGE_MYLIST_H
