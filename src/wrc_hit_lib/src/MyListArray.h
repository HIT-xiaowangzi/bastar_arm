// Generated by gencpp from file task1/MyListArray.msg
// DO NOT EDIT!


#ifndef TASK1_MESSAGE_MYLISTARRAY_H
#define TASK1_MESSAGE_MYLISTARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include "MyList.h"

namespace task1
{
template <class ContainerAllocator>
struct MyListArray_
{
  typedef MyListArray_<ContainerAllocator> Type;

  MyListArray_()
    : MyLists()  {
    }
  MyListArray_(const ContainerAllocator& _alloc)
    : MyLists(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::task1::MyList_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::task1::MyList_<ContainerAllocator> >::other >  _MyLists_type;
  _MyLists_type MyLists;





  typedef boost::shared_ptr< ::task1::MyListArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::task1::MyListArray_<ContainerAllocator> const> ConstPtr;

}; // struct MyListArray_

typedef ::task1::MyListArray_<std::allocator<void> > MyListArray;

typedef boost::shared_ptr< ::task1::MyListArray > MyListArrayPtr;
typedef boost::shared_ptr< ::task1::MyListArray const> MyListArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::task1::MyListArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::task1::MyListArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::task1::MyListArray_<ContainerAllocator1> & lhs, const ::task1::MyListArray_<ContainerAllocator2> & rhs)
{
  return lhs.MyLists == rhs.MyLists;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::task1::MyListArray_<ContainerAllocator1> & lhs, const ::task1::MyListArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace task1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::task1::MyListArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::task1::MyListArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::task1::MyListArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::task1::MyListArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task1::MyListArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task1::MyListArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::task1::MyListArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2e2b950d2eefb888ee3fd8a12a533178";
  }

  static const char* value(const ::task1::MyListArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2e2b950d2eefb888ULL;
  static const uint64_t static_value2 = 0xee3fd8a12a533178ULL;
};

template<class ContainerAllocator>
struct DataType< ::task1::MyListArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "task1/MyListArray";
  }

  static const char* value(const ::task1::MyListArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::task1::MyListArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "MyList[] MyLists\n"
"================================================================================\n"
"MSG: task1/MyList\n"
"uint16 x\n"
"uint16 y\n"
"uint16 class_\n"
"float64 confidence\n"
;
  }

  static const char* value(const ::task1::MyListArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::task1::MyListArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.MyLists);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MyListArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::task1::MyListArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::task1::MyListArray_<ContainerAllocator>& v)
  {
    s << indent << "MyLists[]" << std::endl;
    for (size_t i = 0; i < v.MyLists.size(); ++i)
    {
      s << indent << "  MyLists[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::task1::MyList_<ContainerAllocator> >::stream(s, indent + "    ", v.MyLists[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TASK1_MESSAGE_MYLISTARRAY_H
